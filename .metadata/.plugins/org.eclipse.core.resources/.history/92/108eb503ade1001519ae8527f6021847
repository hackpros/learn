package org.learn.boot.service;

import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.learn.boot.domain.Users;
import org.learn.boot.domain.UsersQueryHelper;
import org.learn.exception.BusinessException;
import org.springframework.stereotype.Service;

import com.navigate.treat.base.service.single.BaseServiceImp;

@Service
public class UsersService extends BaseServiceImp<Users, UsersQueryHelper>
		implements IUsersService {

	static final Logger log = Logger.getLogger(BaseServiceImp.class);;

	UsersMapper usersMapper;

	@Resource
	public void setUsersMapper(UsersMapper usersMapper) {
		this.usersMapper = usersMapper;
		this.setBaseMapper(usersMapper);
	}

	@Override
	public UserRegisterRes doRegister(UserRegisterReq user) {

		Users t = new Users();
		t.setVersions(0);
		usersMapper.insertSelective(t);

		UserRegisterRes userRegisterRes = new UserRegisterRes(t.getId());
		return userRegisterRes;

	}

	@Override
	public UserLoginRes doLogin(UserLoginReq userReq) {

		UsersQueryHelper e = new UsersQueryHelper();
		e.createCriteria().andMobileEqualTo(userReq.getMobile())
				.andPwdEqualTo(userReq.getPassword());
		List<Users> users = usersMapper.selectByExample(e);
		if (users.size() != 1) {

			return null;
		}
		Users user = users.get(0);
		UserLoginRes userLoginRes = new UserLoginRes();
		// 首次登录逻辑
		userLoginRes.setFisrtLogin(true);
		// 首次其它业务调用
		// 如果走kafka消息或其它中间件。则此处理需要生产首次登录消息，按异步的方法处理
		// 否则直接首次登录业务接口
		userLoginRes.setUserId(user.getId());
		userLoginRes.setUserName(user.getNickname());
		return userLoginRes;
	}

	@Override
	public void checkCaptcha(UserLoginRes userloginRes,
			UserLoginReq userLoginReq) {

		if (userloginRes.getPasswordErrorCount() > 3) {

			if (userLoginReq.getCaptcha().equals("123456")) {
				throw new BusinessException(UserContants.USER_CAPTCHA_ERROR);
			}

		}

	}

	@Override
	public Users selectById(long id) {
		return usersMapper.selectById(new Users(id));
	}

}
